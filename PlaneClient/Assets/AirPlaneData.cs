// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AirPlaneData.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace AirPlaneData
{

    #region Messages
    public sealed class AirPlaneMoveData : pb::IMessage
    {
        private static readonly pb::MessageParser<AirPlaneMoveData> _parser = new pb::MessageParser<AirPlaneMoveData>(() => new AirPlaneMoveData());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AirPlaneMoveData> Parser { get { return _parser; } }

        /// <summary>Field number for the "AirPlaneName" field.</summary>
        public const int AirPlaneNameFieldNumber = 1;
        private string airPlaneName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AirPlaneName
        {
            get { return airPlaneName_; }
            set
            {
                airPlaneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Px" field.</summary>
        public const int PxFieldNumber = 2;
        private float px_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Px
        {
            get { return px_; }
            set
            {
                px_ = value;
            }
        }

        /// <summary>Field number for the "Py" field.</summary>
        public const int PyFieldNumber = 3;
        private float py_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Py
        {
            get { return py_; }
            set
            {
                py_ = value;
            }
        }

        /// <summary>Field number for the "Pz" field.</summary>
        public const int PzFieldNumber = 4;
        private float pz_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Pz
        {
            get { return pz_; }
            set
            {
                pz_ = value;
            }
        }

        /// <summary>Field number for the "Elevation" field.</summary>
        public const int ElevationFieldNumber = 5;
        private float elevation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Elevation
        {
            get { return elevation_; }
            set
            {
                elevation_ = value;
            }
        }

        /// <summary>Field number for the "Roll" field.</summary>
        public const int RollFieldNumber = 6;
        private float roll_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Roll
        {
            get { return roll_; }
            set
            {
                roll_ = value;
            }
        }

        /// <summary>Field number for the "Rotation" field.</summary>
        public const int RotationFieldNumber = 7;
        private float rotation_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Rotation
        {
            get { return rotation_; }
            set
            {
                rotation_ = value;
            }
        }

        /// <summary>Field number for the "EulerAnglesX" field.</summary>
        public const int EulerAnglesXFieldNumber = 8;
        private float eulerAnglesX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float EulerAnglesX
        {
            get { return eulerAnglesX_; }
            set
            {
                eulerAnglesX_ = value;
            }
        }

        /// <summary>Field number for the "EulerAnglesY" field.</summary>
        public const int EulerAnglesYFieldNumber = 9;
        private float eulerAnglesY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float EulerAnglesY
        {
            get { return eulerAnglesY_; }
            set
            {
                eulerAnglesY_ = value;
            }
        }

        /// <summary>Field number for the "EulerAnglesZ" field.</summary>
        public const int EulerAnglesZFieldNumber = 10;
        private float eulerAnglesZ_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float EulerAnglesZ
        {
            get { return eulerAnglesZ_; }
            set
            {
                eulerAnglesZ_ = value;
            }
        }

        /// <summary>Field number for the "Speed" field.</summary>
        public const int SpeedFieldNumber = 11;
        private float speed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Speed
        {
            get { return speed_; }
            set
            {
                speed_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (AirPlaneName.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(AirPlaneName);
            }
            if (Px != 0F)
            {
                output.WriteRawTag(21);
                output.WriteFloat(Px);
            }
            if (Py != 0F)
            {
                output.WriteRawTag(29);
                output.WriteFloat(Py);
            }
            if (Pz != 0F)
            {
                output.WriteRawTag(37);
                output.WriteFloat(Pz);
            }
            if (Elevation != 0F)
            {
                output.WriteRawTag(45);
                output.WriteFloat(Elevation);
            }
            if (Roll != 0F)
            {
                output.WriteRawTag(53);
                output.WriteFloat(Roll);
            }
            if (Rotation != 0F)
            {
                output.WriteRawTag(61);
                output.WriteFloat(Rotation);
            }
            if (EulerAnglesX != 0F)
            {
                output.WriteRawTag(69);
                output.WriteFloat(EulerAnglesX);
            }
            if (EulerAnglesY != 0F)
            {
                output.WriteRawTag(77);
                output.WriteFloat(EulerAnglesY);
            }
            if (EulerAnglesZ != 0F)
            {
                output.WriteRawTag(85);
                output.WriteFloat(EulerAnglesZ);
            }
            if (Speed != 0F)
            {
                output.WriteRawTag(93);
                output.WriteFloat(Speed);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (AirPlaneName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(AirPlaneName);
            }
            if (Px != 0F)
            {
                size += 1 + 4;
            }
            if (Py != 0F)
            {
                size += 1 + 4;
            }
            if (Pz != 0F)
            {
                size += 1 + 4;
            }
            if (Elevation != 0F)
            {
                size += 1 + 4;
            }
            if (Roll != 0F)
            {
                size += 1 + 4;
            }
            if (Rotation != 0F)
            {
                size += 1 + 4;
            }
            if (EulerAnglesX != 0F)
            {
                size += 1 + 4;
            }
            if (EulerAnglesY != 0F)
            {
                size += 1 + 4;
            }
            if (EulerAnglesZ != 0F)
            {
                size += 1 + 4;
            }
            if (Speed != 0F)
            {
                size += 1 + 4;
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            AirPlaneName = input.ReadString();
                            break;
                        }
                    case 21:
                        {
                            Px = input.ReadFloat();
                            break;
                        }
                    case 29:
                        {
                            Py = input.ReadFloat();
                            break;
                        }
                    case 37:
                        {
                            Pz = input.ReadFloat();
                            break;
                        }
                    case 45:
                        {
                            Elevation = input.ReadFloat();
                            break;
                        }
                    case 53:
                        {
                            Roll = input.ReadFloat();
                            break;
                        }
                    case 61:
                        {
                            Rotation = input.ReadFloat();
                            break;
                        }
                    case 69:
                        {
                            EulerAnglesX = input.ReadFloat();
                            break;
                        }
                    case 77:
                        {
                            EulerAnglesY = input.ReadFloat();
                            break;
                        }
                    case 85:
                        {
                            EulerAnglesZ = input.ReadFloat();
                            break;
                        }
                    case 93:
                        {
                            Speed = input.ReadFloat();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
